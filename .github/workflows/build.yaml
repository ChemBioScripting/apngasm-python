name: Build and upload to PyPI

on:
  push:
  # tags:
  #     - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  # release:
  #   types:
  #     - published

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
            arch: x64
            submodules_mode: recursive
            cibw_archs_windows: AMD64
            cibw_environment: APNGASM_COMPILE_TARGET=x64
            cibw_before_all: prepare-win.bat
          - os: windows-2019
            arch: x86
            submodules_mode: recursive
            cibw_archs_windows: x86
            cibw_environment: APNGASM_COMPILE_TARGET=x86
            cibw_before_all: prepare-win.bat
          - os: windows-2019
            arch: arm64
            submodules_mode: recursive
            cibw_archs_windows: ARM64
            cibw_environment: APNGASM_COMPILE_TARGET=ARM64
            cibw_before_all: prepare-win.bat
          - os: macos-11
            arch: x64
            submodules_mode: recursive
            cibw_archs_macos: x86_64
            cibw_environment: _PYTHON_HOST_PLATFORM=macosx-11-x86_64 APNGASM_COMPILE_TARGET=x64
            cibw_before_all: ./prepare-mac.sh
          - os: macos-11
            arch: arm64
            submodules_mode: recursive
            cibw_archs_macos: arm64
            cibw_environment: _PYTHON_HOST_PLATFORM=macosx-11-arm64 APNGASM_COMPILE_TARGET=arm64
            cibw_before_all: ./prepare-mac.sh
          - os: ubuntu-20.04
            arch: x64
            submodules_mode: recursive
            cibw_archs_linux: x86_64
            cibw_before_all: ./prepare-linux.sh
          - os: ubuntu-20.04
            arch: x86
            submodules_mode: recursive
            cibw_archs_linux: i686
            cibw_before_all: ./prepare-linux.sh
          - os: ubuntu-20.04
            arch: arm64
            submodules_mode: recursive
            cibw_archs_linux: aarch64
            cibw_before_all: ./prepare-linux.sh
            cibw_skip: "*-muslinux_* pp*"
          - os: ubuntu-20.04
            arch: arm64
            submodules_mode: recursive
            cibw_archs_linux: aarch64
            cibw_before_all: ./prepare-linux.sh
            cibw_skip: "*-multilinux_* pp*"
          - os: ubuntu-20.04
            arch: arm64
            submodules_mode: recursive
            cibw_archs_linux: aarch64
            cibw_before_all: ./prepare-linux.sh
            cibw_skip: "*-muslinux_* *-multilinux_*"
          - os: ubuntu-20.04
            arch: ppc64le
            submodules_mode: recursive
            cibw_archs_linux: ppc64le
            cibw_before_all: ./prepare-linux.sh
            cibw_skip: "*-muslinux_ppc64le"
          - os: ubuntu-20.04
            arch: ppc64le
            submodules_mode: recursive
            cibw_archs_linux: ppc64le
            cibw_before_all: ./prepare-linux.sh
            cibw_skip: "*-multilinux_*"
          - os: ubuntu-20.04
            arch: s390x
            submodules_mode: recursive
            cibw_archs_linux: s390x
            cibw_before_all: ./prepare-linux.sh
            cibw_skip: "*-muslinux_*"
          - os: ubuntu-20.04
            arch: s390x
            submodules_mode: recursive
            cibw_archs_linux: s390x
            cibw_before_all: ./prepare-linux.sh
            cibw_skip: "*-multilinux_*"

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: ${{ matrix.submodules_mode }} # If build with vcpkg, no need boost
      
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.14.1
        env:
          MACOSX_DEPLOYMENT_TARGET: 11
          CIBW_BUILD_FRONTEND: build
          CIBW_ARCHS_WINDOWS: ${{ matrix.cibw_archs_windows }}
          CIBW_ARCHS_MACOS: ${{ matrix.cibw_archs_macos }}
          CIBW_ARCHS_LINUX: ${{ matrix.cibw_archs_linux }}
          CIBW_BEFORE_ALL: ${{ matrix.cibw_before_all }}
          CIBW_ENVIRONMENT: ${{ matrix.cibw_environment }}
          CIBW_SKIP: ${{ matrix.cibw_skip }}

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
  
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  # upload_pypi_test:
  #   needs: [build_wheels_x86, build_wheels_arm, build_wheels_ppc64le, build_wheels_s390x, build_sdist]
  #   runs-on: ubuntu-latest
  #   # upload to PyPI on every tag starting with 'v'
  #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
  #   steps:
  #     - uses: actions/download-artifact@v3
  #       with:
  #         # unpacks default artifact into dist/
  #         # if `name: artifact` is omitted, the action will create extra parent dir
  #         name: artifact
  #         path: dist

  #     - uses: pypa/gh-action-pypi-publish@v1.5.0
  #       with:
  #         user: __token__
  #         password: ${{ secrets.TEST_PYPI_API_TOKEN }}
  #         repository_url: https://test.pypi.org/legacy/

  # upload_pypi:
  #   needs: [build_wheels_x86, build_wheels_arm, build_wheels_ppc64le, build_wheels_s390x, build_sdist]
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'release' && github.event.action == 'published'
  #   steps:
  #     - uses: actions/download-artifact@v3
  #       with:
  #         # unpacks default artifact into dist/
  #         # if `name: artifact` is omitted, the action will create extra parent dir
  #         name: artifact
  #         path: dist

  #     - uses: pypa/gh-action-pypi-publish@v1.5.0
  #       with:
  #         user: __token__
  #         password: ${{ secrets.PYPI_API_TOKEN }}